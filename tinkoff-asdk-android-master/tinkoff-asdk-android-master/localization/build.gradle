apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka'
apply from: '../gradle/publish.gradle'
apply plugin: 'ru.tinkoff.mobile.core-plugin'

android {
    namespace 'ru.tinkoff.acquiring.localization'

    resourcePrefix 'acq_'

    compileSdkVersion rootProject.compileSdk

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

coreCommon {

    /**
     * Опциональный флаг для включения/выключения публикации модуля в корпоративный репозиторий, по-умолчанию = true
     * Логин и пароль для доступа в репозиторий будут взяты из системных переменных
     * PRIVATE_NEXUS_USER и PRIVATE_NEXUS_PASSWORD
     */
    mavenPublishEnabled = false

    /**
     * Опциональный флаг для включения/выключения detekt, по-умолчанию = false
     * При использовании может потребоваться увеличить размер -XX:MaxMetaspaceSize
     * см. https://github.com/Kotlin/dokka/wiki/faq#dokka-throws-javalangoutofmemoryerror-metaspace
     */
    detektEnabled = false
    detektConfig = rootProject.files("gradle/config/detekt.yml")

    /**
     * Опциональный параметр для включения/выключения таски проверки/обновление новых версий core-библиотек
     */
    versionsEnabled = true

    /**
     * Опциональный параметр для включения/выключения таски поиска устаревших android-ресусров,
     * помеченных в стиле AOSP
     */
    collectDeprecatedResourcesEnabled = false

    /**
     * Опциональный параметр для указания файла, где будут записаны найденные устаревшие ресурсы модуля,
     * для использования в линтере (TBD)
     * по-умолчанию = file("$buildDir/deprecated-resources/deprecated.txt")
     */
    collectDeprecatedResourcesOutput = file("$buildDir/deprecated-resources/deprecated.txt")
}

